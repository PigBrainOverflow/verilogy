use super::ast;

#[LALR] grammar;

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};


pub TranslationUnit: ast::TranslationUnit = {
    <m:Module+> => ast::TranslationUnit{modules: m}
};

Module: ast::Module = {
    "module" <id:Identifier> <pa:ParameterSignature?> "(" <po:Comma<Port>> ")" ";" <b:Statement*> "endmodule" => ast::Module::with_def(id, pa, po, b)
};

Port: ast::Port = {
    "input" <r:Range?> <id:Identifier> => ast::Port{name: id, width: r, io: ast::Direction::Input},
    "output" <r:Range?> <id:Identifier> => ast::Port{name: id, width: r, io: ast::Direction::Output},
    "inout" <r:Range?> <id:Identifier> => ast::Port{name: id, width: r, io: ast::Direction::InOut}
};

Identifier: ast::Identifier = {
    r"[a-zA-Z_][0-9A-Za-z_]*" => ast::Identifier(<>.to_string())
};

ParameterSignature: ast::ParameterSignature = {
    "#" "(" <ps:Comma<Parameter>> ")" => ast::ParameterSignature(ps)
};

Statement: ast::Statement = {
    "wire" <r:Range?> <id:Identifier> <e:Expression?> ";" => ast::Statement::Wire{name: id, width: r, init: e, io: None},
    "assign" <id:Identifier> <r:Range?> "=" <e:Expression> ";" => ast::Statement::Assign(ast::AssignDecl{name: id, width: r, value: e}),
    <idm:Identifier> <idi:Identifier> "(" <pos:Comma<Bind>> ")" ";" => ast::Statement::Instance{name: idi, module: idm, params_set: vec![], ports_set: pos},
    <idm:Identifier> "#" "(" <pas:Comma<Bind>> ")" <idi:Identifier> "(" <pos:Comma<Bind>> ")" ";" => ast::Statement::Instance{name: idi, module: idm, params_set: pas, ports_set: pos},
    "genvar" <id:Identifier> ";" => ast::Statement::Genvar(id),
    "generate" <b:Statement*> "endgenerate" => ast::Statement::Generate(b),
    "for" "(" <idi:Identifier> "=" <init:Expression> ";" <cond:Expression> ";" <ids:Identifier> "=" <step:Expression> ")" "begin" <b:Statement*> "end" => ast::Statement::For{
        name: None,
        init: ast::AssignDecl{name: idi, width: None, value: init},
        cond: cond,
        step: ast::AssignDecl{name: ids, width: None, value: step},
        body: b
    },
    "for" "(" <idi:Identifier> "=" <init:Expression> ";" <cond:Expression> ";" <ids:Identifier> "=" <step:Expression> ")" "begin" ":" <idf:Identifier> <b:Statement*> "end" => ast::Statement::For{
        name: Some(idf),
        init: ast::AssignDecl{name: idi, width: None, value: init},
        cond: cond,
        step: ast::AssignDecl{name: ids, width: None, value: step},
        body: b
    }
};

Bind: ast::Bind = {
    "." <id:Identifier> "(" <e:Expression> ")" => ast::Bind{name: id, value: e}
};

Expression: ast::Expression = {
    #[precedence(level="0")]
    "(" <e:Expression> ")" => e,
    <id:Identifier> => ast::Expression::Identifier(id),
    r"-?[0-9]+" => ast::Expression::with_constant(<>),
    <e:Expression> <r:Range> => ast::Expression::Slice(Box::new(e), r),

    #[precedence(level="1")] #[assoc(side="right")]
    "~" <e:Expression> => ast::Expression::UnaryBitOperation(ast::UnBitOp::Not, Box::new(e)),
    "-" <e:Expression> => ast::Expression::UnaryArithmeticOperation(ast::UnArithOp::Neg, Box::new(e)),

    #[precedence(level="2")] #[assoc(side="left")]
    <lhs:Expression> "*" <rhs:Expression> => ast::Expression::BinaryArithmeticOperation(Box::new(lhs), ast::BinArithOp::Mul, Box::new(rhs)),
    <lhs:Expression> "/" <rhs:Expression> => ast::Expression::BinaryArithmeticOperation(Box::new(lhs), ast::BinArithOp::Div, Box::new(rhs)),
    <lhs:Expression> "%" <rhs:Expression> => ast::Expression::BinaryArithmeticOperation(Box::new(lhs), ast::BinArithOp::Mod, Box::new(rhs)),

    #[precedence(level="3")] #[assoc(side="left")]
    <lhs:Expression> "+" <rhs:Expression> => ast::Expression::BinaryArithmeticOperation(Box::new(lhs), ast::BinArithOp::Add, Box::new(rhs)),
    <lhs:Expression> "-" <rhs:Expression> => ast::Expression::BinaryArithmeticOperation(Box::new(lhs), ast::BinArithOp::Sub, Box::new(rhs)),

    #[precedence(level="4")] #[assoc(side="left")]
    <lhs:Expression> "<" <rhs:Expression> => ast::Expression::RelationalOperation(Box::new(lhs), ast::RelOp::Lt, Box::new(rhs)),
    <lhs:Expression> "<=" <rhs:Expression> => ast::Expression::RelationalOperation(Box::new(lhs), ast::RelOp::Le, Box::new(rhs)),
    <lhs:Expression> ">" <rhs:Expression> => ast::Expression::RelationalOperation(Box::new(lhs), ast::RelOp::Gt, Box::new(rhs)),
    <lhs:Expression> ">=" <rhs:Expression> => ast::Expression::RelationalOperation(Box::new(lhs), ast::RelOp::Ge, Box::new(rhs)),

    #[precedence(level="5")] #[assoc(side="left")]
    <lhs:Expression> "==" <rhs:Expression> => ast::Expression::RelationalOperation(Box::new(lhs), ast::RelOp::Eq, Box::new(rhs)),
    <lhs:Expression> "!=" <rhs:Expression> => ast::Expression::RelationalOperation(Box::new(lhs), ast::RelOp::Neq, Box::new(rhs)),

    #[precedence(level="6")] #[assoc(side="left")]
    <lhs:Expression> "&" <rhs:Expression> => ast::Expression::BinaryBitOperation(Box::new(lhs), ast::BinBitOp::And, Box::new(rhs)),
    <lhs:Expression> "|" <rhs:Expression> => ast::Expression::BinaryBitOperation(Box::new(lhs), ast::BinBitOp::Or, Box::new(rhs)),
    <lhs:Expression> "^" <rhs:Expression> => ast::Expression::BinaryBitOperation(Box::new(lhs), ast::BinBitOp::Xor, Box::new(rhs)),
    <lhs:Expression> "^~" <rhs:Expression> => ast::Expression::BinaryBitOperation(Box::new(lhs), ast::BinBitOp::Xnor, Box::new(rhs))
};

Range: ast::Range = {
    "[" <start:Expression> "]" => ast::Range{start: Box::new(start), end: None},
    "[" <start:Expression> ":" <end:Expression> "]" => ast::Range{start: Box::new(start), end: Some(Box::new(end))}
};

Parameter: ast::Parameter = {
    <id:Identifier> "=" <e:Expression> => ast::Parameter{name: id, value: Some(e)},
    <id:Identifier> => ast::Parameter{name: id, value: None}
};